package mybatis.mapping;

import mybatis.domain.LdHomeWork;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

public interface LdHomeWorkMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ldhomework
     *
     * @mbg.generated
     */
    @Delete({
        "delete from ldhomework",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ldhomework
     *
     * @mbg.generated
     */
    @Insert({
        "insert into ldhomework (id, user_id, ",
        "class_id, lession_id, ",
        "homework_filepath, homework_filename, ",
        "create_date, correct_flag, ",
        "star_count, negative_count, ",
        "best_flag)",
        "values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, ",
        "#{classId,jdbcType=BIGINT}, #{lessionId,jdbcType=BIGINT}, ",
        "#{homeworkFilepath,jdbcType=VARCHAR}, #{homeworkFilename,jdbcType=VARCHAR}, ",
        "#{createDate,jdbcType=TIMESTAMP}, #{correctFlag,jdbcType=CHAR}, ",
        "#{starCount,jdbcType=INTEGER}, #{negativeCount,jdbcType=INTEGER}, ",
        "#{bestFlag,jdbcType=CHAR})"
    })
    int insert(LdHomeWork record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ldhomework
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, user_id, class_id, lession_id, homework_filepath, homework_filename, create_date, ",
        "correct_flag, star_count, negative_count, best_flag",
        "from ldhomework",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="class_id", property="classId", jdbcType=JdbcType.BIGINT),
        @Result(column="lession_id", property="lessionId", jdbcType=JdbcType.BIGINT),
        @Result(column="homework_filepath", property="homeworkFilepath", jdbcType=JdbcType.VARCHAR),
        @Result(column="homework_filename", property="homeworkFilename", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_date", property="createDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="correct_flag", property="correctFlag", jdbcType=JdbcType.CHAR),
        @Result(column="star_count", property="starCount", jdbcType=JdbcType.INTEGER),
        @Result(column="negative_count", property="negativeCount", jdbcType=JdbcType.INTEGER),
        @Result(column="best_flag", property="bestFlag", jdbcType=JdbcType.CHAR)
    })
    LdHomeWork selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ldhomework
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, user_id, class_id, lession_id, homework_filepath, homework_filename, create_date, ",
        "correct_flag, star_count, negative_count, best_flag",
        "from ldhomework"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="class_id", property="classId", jdbcType=JdbcType.BIGINT),
        @Result(column="lession_id", property="lessionId", jdbcType=JdbcType.BIGINT),
        @Result(column="homework_filepath", property="homeworkFilepath", jdbcType=JdbcType.VARCHAR),
        @Result(column="homework_filename", property="homeworkFilename", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_date", property="createDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="correct_flag", property="correctFlag", jdbcType=JdbcType.CHAR),
        @Result(column="star_count", property="starCount", jdbcType=JdbcType.INTEGER),
        @Result(column="negative_count", property="negativeCount", jdbcType=JdbcType.INTEGER),
        @Result(column="best_flag", property="bestFlag", jdbcType=JdbcType.CHAR)
    })
    List<LdHomeWork> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ldhomework
     *
     * @mbg.generated
     */
    @Update({
        "update ldhomework",
        "set user_id = #{userId,jdbcType=BIGINT},",
          "class_id = #{classId,jdbcType=BIGINT},",
          "lession_id = #{lessionId,jdbcType=BIGINT},",
          "homework_filepath = #{homeworkFilepath,jdbcType=VARCHAR},",
          "homework_filename = #{homeworkFilename,jdbcType=VARCHAR},",
          "create_date = #{createDate,jdbcType=TIMESTAMP},",
          "correct_flag = #{correctFlag,jdbcType=CHAR},",
          "star_count = #{starCount,jdbcType=INTEGER},",
          "negative_count = #{negativeCount,jdbcType=INTEGER},",
          "best_flag = #{bestFlag,jdbcType=CHAR}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(LdHomeWork record);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ldhomework
     *
     * @mbg.generated
     */
    @Update({
        "update ldhomework",
        "set homework_filepath = #{homeworkFilepath,jdbcType=VARCHAR},",
          "homework_filename = #{homeworkFilename,jdbcType=VARCHAR},",
          "create_date = #{createDate,jdbcType=TIMESTAMP},",
          "correct_flag = #{correctFlag,jdbcType=CHAR},",
          "star_count = #{starCount,jdbcType=INTEGER},",
          "negative_count = #{negativeCount,jdbcType=INTEGER},",
          "best_flag = #{bestFlag,jdbcType=CHAR}",
        "where user_id = #{userId,jdbcType=BIGINT} and ",
        "class_id = #{classId,jdbcType=BIGINT} and ",
        "lession_id = #{lessionId,jdbcType=BIGINT}"
    })
    int updateByBussinessKey(LdHomeWork record);
    
    @Update({
        "insert into ldhomework (user_id,",
        "class_id, lession_id, ",
        "homework_filepath, homework_filename,",
        "create_date, correct_flag, ",
        "star_count, negative_count, ",
        "best_flag)",
        "values",
        "(#{userId,jdbcType=BIGINT}, ",
                "#{classId,jdbcType=BIGINT}, #{lessionId,jdbcType=BIGINT}, ",
                "#{homeworkFilepath,jdbcType=VARCHAR}, #{homeworkFilename,jdbcType=VARCHAR}, ",
                "now(), #{correctFlag,jdbcType=CHAR}, ",
                "#{starCount,jdbcType=INTEGER}, #{negativeCount,jdbcType=INTEGER}, ",
                "#{bestFlag,jdbcType=CHAR})",
        "ON DUPLICATE KEY UPDATE homework_filepath = VALUES(homework_filepath) , ",
        "homework_filename = VALUES(homework_filename)"
    })
    int saveByOnDuplicateKeyUpdate(LdHomeWork record);
    
    @Select({
        "select",
        "id, user_id, class_id, lession_id, homework_filepath, homework_filename, create_date, ",
        "correct_flag, star_count, negative_count, best_flag",
        "from ldhomework where ",
        "class_id = #{classId,jdbcType=BIGINT} and lession_id = #{lessionId,jdbcType=BIGINT} ",
        "order by ${orderBy} ${sortOrder}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="class_id", property="classId", jdbcType=JdbcType.BIGINT),
        @Result(column="lession_id", property="lessionId", jdbcType=JdbcType.BIGINT),
        @Result(column="homework_filepath", property="homeworkFilepath", jdbcType=JdbcType.VARCHAR),
        @Result(column="homework_filename", property="homeworkFilename", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_date", property="createDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="correct_flag", property="correctFlag", jdbcType=JdbcType.CHAR),
        @Result(column="star_count", property="starCount", jdbcType=JdbcType.INTEGER),
        @Result(column="negative_count", property="negativeCount", jdbcType=JdbcType.INTEGER),
        @Result(column="best_flag", property="bestFlag", jdbcType=JdbcType.CHAR)
    })
    List<LdHomeWork> selectLdhomeworkByClassIdLessionId(@Param("classId") Integer classId,
    		@Param("lessionId") Integer lessionId,
    		@Param("orderBy") String orderBy,
    		@Param("sortOrder") String sortOrder);
    
    @Update({
        "update ldhomework",
        "set correct_flag = 1,",
        "<if test=\"flag==0\"> negative_count = negative_count+1,</if>",  
        "<if test=\"flag==1\"> star_count = star_count+1,</if>",
        "<if test=\"flag==2\"></if>",
        "best_flag = #{bestFlag,jdbcType=CHAR}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateCommentByPrimaryKey(@Param("id") Integer id, @Param("flag") int flag, @Param("bestFlag") char bestFlag);
}